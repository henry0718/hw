以下是我在設計一個黑白棋程式的心得反思

作業概述:
    作業二:給一個棋盤，給一個位置，判斷那個位置能不能下。
    作業四:將作業二改寫成函數，再利用這個函數，列印出目前棋盤，白子所有可以走的位置，黑子所有可以走的位置。
    作業五:1.寫一個當下(i,j)位子時，幫你翻轉成正確棋盤的函數
           2.寫一個幫你計算下(i,j)可翻轉多少對方的棋子的函數
           3.電腦要選能翻轉最多棋的位置下
    作業六:整合以上作業，完成一個簡單的可與人對弈的電腦黑白棋程式。

各階段回顧與反思:
    作業二:
        在寫這個作業時，我還不會寫函數，因此我使用了很多層的巢狀迴圈，而這也導致了我的程式碼不僅冗長且可讀性很差。
        我經常寫到後面就忘了前面在幹嘛，就只能重新再看一次整個巢狀迴圈，所以我浪費了許多時間在看重複的程式碼上。

    作業四:
        此時我學到了怎麼使用函數，所以就把主程式的許多內容丟到一個叫inspect的函數裡面，這不僅大大減少了主程式的長度，而且還增加了主程式的可讀性。
        我學會使用#define來定義和在程式碼後面加上註解，以便我在回顧時能馬上了解這段程式碼的功能。

    作業五:
        inspect這個函數在作業四只能檢查那個位置能不能下，而我在此時增加了紀錄下那個能翻轉多少棋子的功能。
        我原本是打算把紀錄翻多少棋子這個功能另外寫成一個函數，但寫到一半發現跟inspect的程式碼很像，所以我就乾脆把這功能寫進inspect裡面。
        我增加了一個叫flip的函數(功能是翻棋)，而我也是拿作業四的inspect的程式碼來微調就完成了。

    作業六:
        由於作業五增加了許多功能，但那些功能都是直接寫在主程式裡，所以我把這些功能都寫成函數再用主程式來呼叫，
        我增加了put_chess(下棋子)、print_chessboard(印出棋盤)、determine(判斷黑方或白方能不能下)、win_lose(判斷勝負和比分)。
        我在增加這些函數時發現照我目前的能力，函數沒辦法直接改主程式裡的變數的值，所以我又去學了指標怎麼用。

改善的可能性:
    雖然目前主程式的可讀性相較於作業二增加了很多，但我基本上都是把那些巢狀迴圈丟進函數裡面再用主程式呼叫，
    所以某些函數的可讀性較低，我認為可以將變數名稱改得更精準，並將註解寫得更詳細，以此來增加可讀性。

總結:
    在這一連串的黑白棋作業中，我從一開始只寫得出可讀性差且冗長的程式碼，到學了許多寫法和技巧後寫出能一眼看完的主程式，
    這些經驗將為我以後的資工生涯奠下重要的基礎，我很感謝出這項作業的老師和不厭其煩解答我問題的室友。
